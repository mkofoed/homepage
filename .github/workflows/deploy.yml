name: Build and Deploy

# 1
# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

#2
env:
  IMAGE_NAME: "homepage"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4.1.7

      - name: Build container image
        working-directory: ./ops
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push image to Docker Hub
        working-directory: ./ops
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4.1.7

      - name: Transfer repo to remote machine
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          source: .
          target: /homepage/

      - name: Copy env vars to .env file
        run: |
          echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" > app.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> app.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> app.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> app.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> app.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> app.env
          echo "ENVIRONMENT=production" >> app.env
          echo "WEB_PORT=${{ secrets.WEB_PORT }}" >> app.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> app.env
          echo "IP=${{ secrets.IP }}" >> app.env
          echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" >> app.env
          echo "LATEST_GITHUB_SHA=${{ github.sha }}" >> app.env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> app.env

      - name: Copy .env file to remote machine
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          overwrite: true
          source: app.env
          target: /homepage/ops/

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ''
          envs: IMAGE_NAME,GITHUB_SHA
          script: |
            cd /homepage/ops/

            # Rename production docker-compose file
            if [ -e docker-compose.production.yml ]; then
              rm docker-compose.yml;
              mv docker-compose.production.yml docker-compose.yml;
            fi

            # Rename the .env file
            mv app.env .env

            # Log in to Docker Hub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # Pull latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:${{ github.sha }}

            # Pull latest images and build containers
            docker compose -f docker-compose.yml up -d --build

            # Collectstatic
            if [ ! -d /homepage/static ]; then
              mkdir /homepage/static;
            fi
            docker compose run web python manage.py collectstatic --no-input

            # Migrate
            docker compose run web python manage.py migrate

            # Restart containers
            docker compose restart
